{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nrwl/nx"],
  "overrides": [
    {
      "files": ["*.ts", "*.js"],
      "rules": {
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase", "UPPER_CASE"],
            "leadingUnderscore": "allowSingleOrDouble"
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE", "PascalCase"],
            "leadingUnderscore": "allowSingleOrDouble"
          },
          {
            "selector": "parameter",
            "format": ["camelCase"],
            "leadingUnderscore": "allowSingleOrDouble"
          },
          {
            "selector": "memberLike",
            "format": ["camelCase", "PascalCase", "UPPER_CASE"],
            "leadingUnderscore": "allowSingleOrDouble"
          },
          {
            "selector": "property",
            "format": ["camelCase", "UPPER_CASE", "PascalCase", "snake_case"],
            "leadingUnderscore": "allowSingleOrDouble"
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          }
        ],
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ]
      }
    },
    {
      "files": ["*.js"],
      "extends": ["plugin:@nrwl/nx/javascript"],
      "rules": {}
    },
    {
      "files": ["*.ts"],
      // includes both regular & typescript ESLint recommended & prettier
      // see: https://github.com/nrwl/nx/blob/master/packages/eslint-plugin-nx/src/configs/typescript.ts
      "extends": ["plugin:@nrwl/nx/typescript"],
      "rules": {
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": [
          "error",
          {
            "default": "array"
          }
        ],
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "Object": {
                "message": "Avoid using the `Object` type. Did you mean `object`?"
              },
              "Function": {
                "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
              },
              "Boolean": {
                "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
              },
              "Number": {
                "message": "Avoid using the `Number` type. Did you mean `number`?"
              },
              "String": {
                "message": "Avoid using the `String` type. Did you mean `string`?"
              },
              "Symbol": {
                "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
              }
            }
          }
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": "off",
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "no-public"
          }
        ],
        "@typescript-eslint/member-delimiter-style": [
          "off",
          {
            "multiline": {
              "delimiter": "none",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "semi",
              "requireLast": false
            }
          }
        ],
        "@typescript-eslint/member-ordering": "error",
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": "warn",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-parameter-properties": "off",
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": [
          "warn",
          {
            "hoist": "all"
          }
        ],
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-unused-vars": ["warn", { "vars": "all", "args": "none" }],
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/prefer-for-of": "off",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/triple-slash-reference": [
          "error",
          {
            "path": "always",
            "types": "prefer-import",
            "lib": "always"
          }
        ],
        "@typescript-eslint/unified-signatures": "error",
        "arrow-parens": ["off", "always"],
        "brace-style": ["off", "off"],
        "complexity": "off",
        "eqeqeq": ["error", "smart"],
        "guard-for-in": "error",
        "id-blacklist": [
          "error",
          "any",
          "Number",
          "number",
          "String",
          "string",
          "Boolean",
          "boolean",
          "Undefined",
          "undefined"
        ],
        "id-match": "error",
        "import/order": [
          "error",
          {
            "newlines-between": "always-and-inside-groups",
            "groups": ["object", "type", ["builtin", "external"], "parent", "sibling", "index"],
            "alphabetize": { "order": "asc" },
            "pathGroupsExcludedImportTypes": [],
            "pathGroups": [
              {
                "pattern": "@angular/**",
                "group": "object"
              },
              {
                "pattern": "@ng*/**",
                "group": "type"
              },
              {
                "pattern": "ng*",
                "group": "type"
              },
              {
                "pattern": "angular*",
                "group": "type"
              }
            ]
          }
        ],
        "jsdoc/check-alignment": "error",
        "jsdoc/check-indentation": "error",
        "jsdoc/newline-after-description": "error",
        "max-classes-per-file": "off",
        "no-bitwise": "error",
        "no-caller": "error",
        "no-cond-assign": "error",
        "no-console": [
          "warn",
          {
            "allow": ["log"]
          }
        ],
        "no-debugger": "error",
        "no-empty": "off",
        "no-eval": "error",
        "no-fallthrough": "off",
        "no-invalid-this": "off",
        "no-multiple-empty-lines": ["error", { "max": 2, "maxEOF": 0, "maxBOF": 0 }],
        "no-new-wrappers": "error",
        "no-restricted-imports": ["error", "lodash"],
        "no-throw-literal": "error",
        "no-underscore-dangle": "off",
        "no-unsafe-finally": "error",
        "no-unused-labels": "error",
        "no-use-before-define": "off",
        "no-var": "error",
        "object-shorthand": "error",
        "one-var": ["error", "never"],
        "padded-blocks": [
          "off",
          {
            "blocks": "never"
          },
          {
            "allowSingleLineBlocks": true
          }
        ],
        "prefer-arrow/prefer-arrow-functions": [
          "error",
          {
            "disallowPrototype": false,
            "singleReturnOnly": true,
            "classPropertiesAllowed": false,
            "allowStandaloneDeclarations": true
          }
        ],
        "prefer-const": "error",
        "radix": "error",
        "rxjs/no-internal": "error",
        "spaced-comment": [
          "error",
          "always",
          {
            "markers": ["/"]
          }
        ],
        "use-isnan": "error",
        "valid-typeof": "off",

        // turned off because handled by Prettier
        "@typescript-eslint/indent": "off",
        "@typescript-eslint/quotes": "off",
        "@typescript-eslint/semi": ["off", null],
        "@typescript-eslint/type-annotation-spacing": "off",
        "comma-dangle": "off",
        "eol-last": "off",
        "indent": "off",
        "linebreak-style": "off",
        "max-len": "off",
        "new-parens": "off",
        "newline-per-chained-call": "off",
        "no-irregular-whitespace": "off",
        "no-extra-semi": "off",
        "no-trailing-spaces": "off",
        "quote-props": "off",
        "quotes": "off",
        "semi": "off",
        "space-before-function-paren": "off",
        "space-in-parens": ["off", "never"]
      },
      "plugins": [
        "eslint-plugin-jsdoc",
        "eslint-plugin-prefer-arrow",
        "eslint-plugin-import",
        "eslint-plugin-rxjs",
        "@typescript-eslint"
      ]
    }
  ]
}
